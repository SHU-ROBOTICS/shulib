#include "shulib/gui/gui.hpp"
#include "liblvgl/lvgl.h"
#include "pros/rtos.hpp"

#define SCREEN_WIDTH_PX 480
#define SCREEN_HEIGHT_PX 240

LV_IMG_DECLARE(setonhalllogo);
pros::Task* initTask = nullptr;

/* Debug class for logging */
typedef struct {
    lv_obj_t *log_panel;
    lv_obj_t *log_label;
    lv_obj_t *scroll_up_btn;
    lv_obj_t *scroll_down_btn;
    lv_obj_t *clear_log_btn;      // Clear Log button
    char log_buffer[1024];
    bool is_log_visible;
} Debug;

/* Global Debug instance for logging */
Debug *global_debug;


void create_main_screen() {

    // Set global debug instance
    global_debug = &ui->debug;

    // Create a new screen object
    ui->main_screen = lv_obj_create(NULL);
    lv_obj_add_style(ui->main_screen, &ui->blue_style, 0);
    lv_scr_load(ui->main_screen);

    // Create a label to display the color
    ui->color_label = lv_label_create(ui->main_screen);
    lv_label_set_text(ui->color_label, "BLUE");
    lv_obj_set_style_text_color(ui->color_label, lv_color_hex(0xFFFFFF), 0);
    lv_obj_set_style_text_font(ui->color_label, &lv_font_montserrat_48, 0);
    lv_obj_align(ui->color_label, LV_ALIGN_CENTER, 0, -30);

    // Create a label for preset sentences
    ui->preset_label = lv_label_create(ui->main_screen);
    lv_label_set_text(ui->preset_label, preset_sentences[current_sentence_index]);
    lv_obj_set_style_text_color(ui->preset_label, lv_color_hex(0xFFFFFF), 0);
    lv_obj_set_style_text_font(ui->preset_label, &lv_font_montserrat_20, 0);
    lv_obj_align(ui->preset_label, LV_ALIGN_CENTER, 0, 40);

    // Create a toggle button for background color
    ui->toggle_btn = lv_btn_create(ui->main_screen);
    lv_obj_set_size(ui->toggle_btn, 70, 35);
    lv_obj_align(ui->toggle_btn, LV_ALIGN_BOTTOM_LEFT, 10, -10);
    lv_obj_add_flag(ui->toggle_btn, LV_OBJ_FLAG_CHECKABLE);

    lv_obj_t *label = lv_label_create(ui->toggle_btn);
    lv_label_set_text(label, "Toggle");
    lv_obj_center(label);

    lv_obj_add_event_cb(ui->toggle_btn, MainUI_toggle_btn_event_handler, LV_EVENT_VALUE_CHANGED, ui);

    // Create a toggle button for preset sentences
    ui->preset_toggle_btn = lv_btn_create(ui->main_screen);
    lv_obj_set_size(ui->preset_toggle_btn, 50, 25);
    lv_obj_align(ui->preset_toggle_btn, LV_ALIGN_BOTTOM_RIGHT, -10, -10);
    lv_obj_add_event_cb(ui->preset_toggle_btn, MainUI_preset_toggle_event_handler, LV_EVENT_CLICKED, ui);

    lv_obj_t *preset_label = lv_label_create(ui->preset_toggle_btn);
    lv_label_set_text(preset_label, "Preset");
    lv_obj_center(preset_label);

    // Create the log panel
    ui->debug.log_panel = lv_obj_create(ui->main_screen);
    lv_obj_set_size(ui->debug.log_panel, 300, 200);
    lv_obj_align(ui->debug.log_panel, LV_ALIGN_TOP_RIGHT, -10, 10);
    lv_obj_set_style_bg_color(ui->debug.log_panel, lv_color_hex(0x000000), 0);
    lv_obj_set_style_border_width(ui->debug.log_panel, 2, 0);
    lv_obj_set_style_border_color(ui->debug.log_panel, lv_color_hex(0xFFFFFF), 0);
    lv_obj_add_flag(ui->debug.log_panel, LV_OBJ_FLAG_HIDDEN);

    // Create a label inside the log panel
    ui->debug.log_label = lv_label_create(ui->debug.log_panel);
    lv_label_set_text(ui->debug.log_label, "Log Initialized:\n");
    lv_obj_set_style_text_color(ui->debug.log_label, lv_color_hex(0xFFFFFF), 0);
    lv_obj_align(ui->debug.log_label, LV_ALIGN_TOP_LEFT, 5, 5);

    // Initialize the log buffer
    memset(ui->debug.log_buffer, 0, sizeof(ui->debug.log_buffer));
    strncat(ui->debug.log_buffer, "Log Initialized:\n", sizeof(ui->debug.log_buffer) - 1);

    // Add a button to toggle the log panel visibility
    ui->log_toggle_btn = lv_btn_create(ui->main_screen);
    lv_obj_set_size(ui->log_toggle_btn, 80, 30);
    lv_obj_align(ui->log_toggle_btn, LV_ALIGN_BOTTOM_LEFT, 10, -60);
    lv_obj_add_event_cb(ui->log_toggle_btn, MainUI_log_toggle_event_handler, LV_EVENT_CLICKED, ui);

    lv_obj_t *log_label = lv_label_create(ui->log_toggle_btn);
    lv_label_set_text(log_label, "Show Log");
    lv_obj_center(log_label);

    // Add scroll up button for the log
    ui->debug.scroll_up_btn = lv_btn_create(ui->main_screen);
    lv_obj_set_size(ui->debug.scroll_up_btn, 50, 25);
    lv_obj_align(ui->debug.scroll_up_btn, LV_ALIGN_BOTTOM_LEFT, 100, -60);
    lv_obj_add_event_cb(ui->debug.scroll_up_btn, Debug_scroll_up, LV_EVENT_CLICKED, NULL);
    lv_obj_add_flag(ui->debug.scroll_up_btn, LV_OBJ_FLAG_HIDDEN);

    lv_obj_t *scroll_up_label = lv_label_create(ui->debug.scroll_up_btn);
    lv_label_set_text(scroll_up_label, "Up");
    lv_obj_center(scroll_up_label);

    // Add scroll down button for the log
    ui->debug.scroll_down_btn = lv_btn_create(ui->main_screen);
    lv_obj_set_size(ui->debug.scroll_down_btn, 50, 25);
    lv_obj_align(ui->debug.scroll_down_btn, LV_ALIGN_BOTTOM_LEFT, 100, -100);
    lv_obj_add_event_cb(ui->debug.scroll_down_btn, Debug_scroll_down, LV_EVENT_CLICKED, NULL);
    lv_obj_add_flag(ui->debug.scroll_down_btn, LV_OBJ_FLAG_HIDDEN);

    lv_obj_t *scroll_down_label = lv_label_create(ui->debug.scroll_down_btn);
    lv_label_set_text(scroll_down_label, "Down");
    lv_obj_center(scroll_down_label);

    // Add clear log button for the log
    ui->debug.clear_log_btn = lv_btn_create(ui->main_screen);
    lv_obj_set_size(ui->debug.clear_log_btn, 80, 30);
    lv_obj_align(ui->debug.clear_log_btn, LV_ALIGN_BOTTOM_LEFT, 10, -100);
    lv_obj_add_event_cb(ui->debug.clear_log_btn, Debug_clear_log, LV_EVENT_CLICKED, NULL);
    lv_obj_add_flag(ui->debug.clear_log_btn, LV_OBJ_FLAG_HIDDEN);

    lv_obj_t *clear_label = lv_label_create(ui->debug.clear_log_btn);
    lv_label_set_text(clear_label, "Clear Log");
    lv_obj_center(clear_label);

    // Log the initialization
    Debug_Log("Main screen created.");
}

void shulib::Gui::create_styles() {
    // Initialize styles
    lv_style_init(&this->red_style);
    lv_style_set_bg_color(&this->red_style, lv_color_hex(0xFF0000));

    lv_style_init(&this->blue_style);
    lv_style_set_bg_color(&this->blue_style, lv_color_hex(0x004488));
}

void shulib::Gui::init() {
    // show SHU logo
    lv_obj_t *img = lv_img_create(lv_scr_act());
    lv_img_set_src(img, &setonhalllogo);
    lv_obj_align(img, LV_ALIGN_CENTER, 0, 0);

    // create gui in background using pros task
    initTask = new pros::Task {[=] {

        }};

    pros::delay(3000);

    // initialize the GUI
    create_main_screen();
}